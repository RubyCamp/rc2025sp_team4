# Ruby合宿2025春・蟹ロボ基本操作手順

本文書では、Ruby合宿2025春において使用する蟹ロボの基本的な操作手順を説明します。
ドキュメントは主にGithub上にまとめられており、本文書はそれらへのリファレンス的な位置付けとなります。

## ファームウェアの更新

本合宿では、通常の蟹ロボに対して追加で「距離センサー」（vl53l0x）を接続して使用するため、ファームウェアの更新が必要です。
以下の手順を参照し、各班毎に蟹ロボのファームウェアアップデートを行ってください。

https://github.com/gfd-dennou-club/mrubyc-esp32/wiki/Users_%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF_Windows11

ただし、同ドキュメント中の「ファームウェアの取得」節にあるURL（オフィシャルのリポジトリ）から取得するのではなく、以下に配置済みの本合宿用にカスタマイズされたファームウェアファイルを使用してください。


TODO: ファームアップロード先URL（Github想定）記述


## プログラム実行

蟹ロボのプログラムは、mruby/cによって記述されます。
mruby/c自体のドキュメントは、以下を参照願います。

https://www.s-itoc.jp/support/technical-support/mrubyc/mrubyc-docs/

また、以下のページで蟹ロボを動かすために必要なドキュメントが参照可能です。

https://github.com/gfd-dennou-club/mrubyc-esp32/wiki



### プログラムのコンパイルと書き込みについて

上記ドキュメントでは、Linux環境からmakeコマンドでプログラムを蟹ロボ（ESP32）に転送する方法が説明されていますが、本合宿ではこちらの方法は原則として使用しません（手順がやや複雑であるため）。

代わりに、以下のWebサイトからプログラムのコンパイル・転送を行います。

https://ceres.epi.it.matsue-ct.ac.jp/ruby/

#### 使い方

まず、前提としてプログラムはテキストファイルとしてPC上の任意のディレクトリに保存されているものとします。
例として、「C:\rubycamp2025\src\main.rb」にmruby/cで記述された蟹ロボ操作用プログラムが格納されているものとします。

また、蟹ロボとPC本体はUSBケーブルで接続済みであるものとします。


##### プログラムの読み込み（ロード）

前述のページを開き、画面下部の「読み込み」ボタンをクリックし、上記のファイルを読み込んでください。

##### コンパイル実行

その後、「コンパイル」ボタンをクリックすると別タブ「書き込みツール」が開き、コンパイルが実行されます。
「コンパイルバージョン」欄の下に「コンパイル完了」と表示されれば成功です。

更にその下には、「RBoard」と「ESP32」のボタンがありますが、「ESP32」をクリックしてチェックマークを付けておきます。
また、「自動スクロール」「自動接続」のチェックも付けておくと便利です。


##### プログラム転送（書き込み実行）

コンパイルされたプログラムは、蟹ロボ本体に転送せねば実行できません。
先の「自動接続」がチェックされていれば、コンパイル完了と共に蟹ロボとPCの接続（コネクション）が実行されます。
※ 自動接続をしない場合は「接続」ボタンをクリックし、蟹ロボが繋がっているCOMポート番号を選択します。

接続成功時のログは以下のようなイメージになります。

```
> try to connect...
> connection established.
> try to enter command mode...
> try to enter command mode...
> try to enter command mode...
> try to enter command mode...
> try to enter command mode...
ets Jul 29 2019 12:21:46
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0030,len:4644
load:0x40078000,len:15100
load:0x40080400,len:4
load:0x40080404,len:3192
entry 0x400805a4
> try to enter command mode...
> try to enter command mode...
+OK mruby/c
```

「+OK mruby/c」が表示されると、「書き込み」ボタンが押せるようになりますので、押下しましょう。
追加で以下のようなログが表示されれば成功です。
※ 数字部分はプログラムサイズによって変化します。

```
> clear
+OK
> write 181
+OK Write bytecode
+DONE
```

※ 注意点

「> try to enter command mode...」の表示が延々と繰り返され次に進まない場合は、蟹ロボ本体のUSBコネクタ横にある「EN」と記述された小さなボタンを押下すると進行する場合があります。


##### 実行

プログラムは既に書き込まれていますので、後は「切断」を押下してCOM接続を切り、蟹ロボ側のメインスイッチをONにしてプログラムを実行できます。
また、COM接続を維持したままでも「実行」ボタンを押下することでプログラムを実行することが可能です。

例えば、COM接続を維持したまま、

```
num = 0
	  
10.times do |i|
    puts i.to_s + " times!!!!!!"
end
```

のようなプログラムを実行した場合、以下のようなログが出力されます。

```
> execute
+OK
Kani-Board, mruby/c v3.3.1 start
Kani-Board, mrbc_run start
0 times!!!!!!
1 times!!!!!!
2 times!!!!!!
3 times!!!!!!
4 times!!!!!!
5 times!!!!!!
6 times!!!!!!
7 times!!!!!!
8 times!!!!!!
9 times!!!!!!
```

mruby/c上で「puts」メソッドによって標準出力に文字列を出力しているわけですが、この場合USBケーブルを外し（COM接続を切り）ていた場合は結果を確認することができません。
※ 蟹ロボ上にモニターが接続されていないため。

デバッグ等の場合は、上記のようにCOM接続を維持したまま標準出力を活用すると便利です。

実行完了後は「切断」をクリックし、

```
> try to disconnect...
> successfully disconnected.
```

のようなログを確認してください。

再度プログラムを修正して実行する際は、書き込みツールタブを閉じて再度コンパイル手順から実施願います。
